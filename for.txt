for's para preenchimento das matrizes


00100010000000000000000000000001 r2 = 1

00100011000000000000000000000100 r3 = 4

00100100000000000000000000000000 r4 = 0

00100101000000000000000000010000 r5 = 16

00100110000000000000000000100000 r6 = 32 

deixei o r7 reservado para o r

00100000000000000000000000000000 i no r0 **

for i

01010000010000000000000001001000 >= 4

00100001000000000000000000000000 j no r1 **


for j

01010001010000000000000001000000 >= 4

*

00001000000100000000000000000000 r8 = r0 + r1 // (i + j)

01101001000000110000000000000000 r9 = r0 * r3 // i * 4

00001001100100010000000000000000 r9 = r9 + r1

00001001100101000000000000000000 r9 = r9 + r4

00111000100100000000000000000000 save r8 no address r9

*

00000001000100100000000000000000 j += 1;

jump for j

01000000000000000000000000100000 endereço 8 (32)

end j

00000000000000100000000000000000 i += 1;

jump for i

01000000000000000000000000011000 endereço 6 (24)

end i:

endereço end_i

22000001 23000004 24000000 25000010 26000020 20000000 50400048 21000000 51400040 08100000 69030000 09910000 09940000 38900000 01120000 40000020 00020000 40000018



00100000000000000000000000000000 i no r0 **  (18)

for i

01010000010000000000000001111100 >= 4	     (19)

00100001000000000000000000000000 j no r1 **


for j

01010001010000000000000001110100 >= 4	     (21)

*

00001000000100000000000000000000 r8 = r0 + r1 // (i + j)

01101001000000110000000000000000 r9 = r0 * r3 // i * 4

00001001100100010000000000000000 r9 = r9 + r1

00001001100101010000000000000000 r9 = r9 + r5

00111000100100000000000000000000 save r8 no address r9

*

00000001000100100000000000000000 j += 1;

jump for j

01000000000000000000000001010100 pula pro endereço 21 (84)

end j (29)

00000000000000100000000000000000 i += 1; (29)

jump for i

01000000000000000000000001001100 pula pro endereço 19 (76)

end i (31)

endereço end_i (31)

